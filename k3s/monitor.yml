# Namespace
---
apiVersion: v1
kind: Namespace
metadata:
  name: monitor

# Secret com certificados SSLs
---
apiVersion: v1
kind: Secret
metadata:
  name: certificado-ssl
  namespace: monitor
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUU3RENDQTlTZ0F3SUJBZ0lTQSs2elhvNmRQWURMSzQxY3M2NGVoOU55TUEwR0NTcUdTSWIzRFFFQkN3VUEKTURJeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1Rc3dDUVlEVlFRRApFd0pTTXpBZUZ3MHlNekV4TURFeE9UTXpNRGxhRncweU5EQXhNekF4T1RNek1EaGFNQm94R0RBV0JnTlZCQU1NCkR5b3VZWEJqYjJSbExtTnZiUzVpY2pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQUpRb2h6RGxpanJSQWFHV1hQSm9XRHBVV3hFWGVEQU45d1B0TUgxWk9CbW5oOXB4a3dYalNqdHRVdFBJRlcwRQpwalBHSGVXQ3FOb0hjZm1CZ0xTdXdXTmJuRjR0K3RRSloxdDFFcWRqRTAwZ2FBcEF1MVM4L3AzcFM3bWIyMjVXCm1OVHd1LzdnNHBtWURHZTlsUTNzbmFCWmRIcVF1WllzNllpb1Qvb0RNd3hMRzlCckxVbzBqVmI2dEwwYllnem4KQ0lsYXhCVVpCVExmVEQ5UkVsdTNDK3FSQzdPWVhkVWVSMHdEUFdvbGlZaFBIS0YxNTRUK2dPUk43dkE4eHNUMwpRcVBnNkgvRU1iWENBeldpNjJvRkp5WHNIVUFIZ01VQ3pGcFQwRm4wSWYrWndNZWVrRHc4N1lmK0dyWU9RNWZhCmlXdTJYUFhuOW9DOTNVSmtyTHNvb0k4Q0F3RUFBYU9DQWhJd2dnSU9NQTRHQTFVZER3RUIvd1FFQXdJRm9EQWQKQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFkQmdOVgpIUTRFRmdRVUtYRHJvQ3RsYjFJbEZQWnNKOE5QOXc5TFArUXdId1lEVlIwakJCZ3dGb0FVRkM2ekY3ZFlWc3V1ClVBbEE1aCt2bllzVXdzWXdWUVlJS3dZQkJRVUhBUUVFU1RCSE1DRUdDQ3NHQVFVRkJ6QUJoaFZvZEhSd09pOHYKY2pNdWJ5NXNaVzVqY2k1dmNtY3dJZ1lJS3dZQkJRVUhNQUtHRm1oMGRIQTZMeTl5TXk1cExteGxibU55TG05eQpaeTh3R2dZRFZSMFJCQk13RVlJUEtpNWhjR052WkdVdVkyOXRMbUp5TUJNR0ExVWRJQVFNTUFvd0NBWUdaNEVNCkFRSUJNSUlCQlFZS0t3WUJCQUhXZVFJRUFnU0I5Z1NCOHdEeEFIY0FPMU4zZFQ0dHVZQk9pekJiQnY1QU8yZlkKVDhQMHg3MEFEUzF5YitINjFCY0FBQUdMakpjRDZ3QUFCQU1BU0RCR0FpRUFnaDhTZVdXeHhpSUZ6UEZsdGl4ZAprcUhOdTc0NmpPTXQ4Z1hOKytMZTNWWUNJUUM4OGRqakZhK0I2K0hBU2l4a0NRMHpuOSs1TzZvU1JBemQxRGNLCjlQeGZPd0IyQU5xMnYycy90YllpbjV2Q3UxeHI2SENSY1d5N1VZU0ZOTDJrUFRCSTEvdXJBQUFCaTR5WEJnWUEKQUFRREFFY3dSUUloQUlSbVVnNkZHcmcxbWh6Y1YzK3lUbDBhd0lOdkV3cVM3MzAybUxsaUE0amhBaUE4T2ZqRApFU3BtUU5XSk4rYXpxZk1hOVBGUkU3MCtIQnJ4Y21GRCt6NjFZVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBCm80dWN5K0tXRWhQcEdEOWRmRi9KTXRld1pqc0ViRU5rRTlOVEtwZTNNQ0FSUmNIR2s0ZWFMS0hYMTl2blR4SXEKSDI0VjREQ09OMUgxeEdHQTg2UDFxcmdRL01IK1YwNDVXMUZ1RS9zMy91OEJrUGdHdXM0L29mL0lXdHh5V04ydQorMHVuL0JnUDkrWW56WXMyR2Vlb21ZTEdGT21adDc4QXpVR0tPNUQ2SjhBOHBzSTh0ekxabVZ2Z3oxUVdqRHBKCnAyRTQ4aS9YVFptMWxOaUw1YnZXa0JObWo1eVV3T1dRcEVscXlsOXR1bjIrcENKQ1czZlI3YzRSOGZFNWRnY3AKUUt2SEJQRnpIam5xRm1KZUVZM1pNbEQyZyt2U003SUNZNlNaRXpCZXV4N0NQY29ma1ltQ09LcEFYRzcxZDVCZAo3aytwZGtEaGFNNStickhLRWlRZ213PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRkZqQ0NBdjZnQXdJQkFnSVJBSkVyQ0VyUERCaW5VL2JXTGlXblgxb3dEUVlKS29aSWh2Y05BUUVMQlFBdwpUekVMTUFrR0ExVUVCaE1DVlZNeEtUQW5CZ05WQkFvVElFbHVkR1Z5Ym1WMElGTmxZM1Z5YVhSNUlGSmxjMlZoCmNtTm9JRWR5YjNWd01SVXdFd1lEVlFRREV3eEpVMUpISUZKdmIzUWdXREV3SGhjTk1qQXdPVEEwTURBd01EQXcKV2hjTk1qVXdPVEUxTVRZd01EQXdXakF5TVFzd0NRWURWUVFHRXdKVlV6RVdNQlFHQTFVRUNoTU5UR1YwSjNNZwpSVzVqY25sd2RERUxNQWtHQTFVRUF4TUNVak13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUUM3QWhVb3pQYWdsTk1QRXV5TlZaTEQrSUx4bWFaNlFvaW5YU2FxdFN1NXhVeXhyNDVyK1hYSW85Y1AKUjVRVVZUVlhqSjZvb2prWjlZSThRcWxPYnZVN3d5N2JqY0N3WFBOWk9PZnR6Mm53V2dzYnZzQ1VKQ1dIK2pkeApzeFBuSEt6aG0rL2I1RHRGVWtXV3FjRlR6alRJVXU2MXJ1MlAzbUJ3NHFWVXE3WnREcGVsUURScks5TzhadXRtCk5IejZhNHVQVnltWitEQVhYYnB5Yi91QnhhM1NobGc5RjhmbkNidnhLL2VHM01IYWNWM1VSdVBNclNYQmlMeGcKWjNWbXMvRVk5NkpjNWxQL09vaTJSNlgvRXhqcW1BbDNQNTFUK2M4QjVmV21jQmNVcjJPay81bXprNTNjVTZjRwova2lGSGFGcHJpVjF1eFBNVWdQMTdWR2hpOXNWQWdNQkFBR2pnZ0VJTUlJQkJEQU9CZ05WSFE4QkFmOEVCQU1DCkFZWXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0lHQ0NzR0FRVUZCd01CTUJJR0ExVWRFd0VCL3dRSU1BWUIKQWY4Q0FRQXdIUVlEVlIwT0JCWUVGQlF1c3hlM1dGYkxybEFKUU9ZZnI1MkxGTUxHTUI4R0ExVWRJd1FZTUJhQQpGSG0wV2VaN3R1WGtBWE9BQ0lqSUdsajI2WnR1TURJR0NDc0dBUVVGQndFQkJDWXdKREFpQmdnckJnRUZCUWN3CkFvWVdhSFIwY0RvdkwzZ3hMbWt1YkdWdVkzSXViM0puTHpBbkJnTlZIUjhFSURBZU1CeWdHcUFZaGhab2RIUncKT2k4dmVERXVZeTVzWlc1amNpNXZjbWN2TUNJR0ExVWRJQVFiTUJrd0NBWUdaNEVNQVFJQk1BMEdDeXNHQVFRQgpndDhUQVFFQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQ0FRQ0Z5azVIUHFQM2hVU0Z2TlZuZUxLWVk2MTFUUjZXClBUTmxjbFF0Z2FEcXcrMzRJTDlmekxkd0FMZHVPL1plbE43a0lKK203NHV5QStlaXRSWThrYzYwN1RrQzUzd2wKaWtmbVpXNC9SdlRaOE02VUsrNVV6aEs4akNkTHVNR1lMNkt2elhHUlNnaTN5TGdqZXdRdENQa0lWejZEMlFRegpDa2NoZUFtQ0o4TXF5SnU1emx6eVpNakF2bm5BVDQ1dFJBeGVrcnN1OTRzUTRlZ2RSQ25iV1NEdFk3a2grQkltCmxKTlhvQjFsQk1FS0lxNFFEVU9Yb1JnZmZ1RGdoamUxV3JHOU1MK0hiaXNxL3lGT0d3WEQ5UmlYOEY2c3c2VzQKYXZBdXZEc3p1ZTVMM3N6ODVLK0VDNFkvd0ZWRE52Wm80VFlYYW82WjBmK2xRS2MwdDhEUVl6azFPWFZ1OHJwMgp5Sk1DNmFsTGJCZk9EQUxadllIN243ZG8xQVpsczRJOWQxUDRqbmtEclFveEIzVXFROWhWbDNMRUtRNzN4RjFPCnlLNUdoRERYOG9WZkdLRjV1K2RlY0lzSDRZYVR3N21QM0dGeEpTcXYzKzBsVUZKb2k1TGM1ZGExNDlwOTBJZHMKaENFeHJvTDErN21yeUlrWFBlRk01VGdPOXIwcnZaYUJGT3ZWMnowZ3AzNVowK0w0V1BsYnVFak4vbHhQRmluKwpIbFVqcjhnUnNJM3FmSk9RRnkvOXJLSUpSMFkvOE9td3QvOG9UV2d5MW1kZUhtbWprN2oxbllzdkM5SlNRNlp2Ck1sZGxUVEtCM3poVGhWMStYV1lwNnJqZDVKVzF6YlZXRWtMTnhFN0dKVGhFVUczc3pnQlZHUDdwU1dUVVRzcVgKbkxSYndIT29xN2hId2c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlGWURDQ0JFaWdBd0lCQWdJUVFBRjNJVGZVNlVLNDduYXFQR1FLdHpBTkJna3Foa2lHOXcwQkFRc0ZBREEvCk1TUXdJZ1lEVlFRS0V4dEVhV2RwZEdGc0lGTnBaMjVoZEhWeVpTQlVjblZ6ZENCRGJ5NHhGekFWQmdOVkJBTVQKRGtSVFZDQlNiMjkwSUVOQklGZ3pNQjRYRFRJeE1ERXlNREU1TVRRd00xb1hEVEkwTURrek1ERTRNVFF3TTFvdwpUekVMTUFrR0ExVUVCaE1DVlZNeEtUQW5CZ05WQkFvVElFbHVkR1Z5Ym1WMElGTmxZM1Z5YVhSNUlGSmxjMlZoCmNtTm9JRWR5YjNWd01SVXdFd1lEVlFRREV3eEpVMUpISUZKdmIzUWdXREV3Z2dJaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUNEd0F3Z2dJS0FvSUNBUUN0NkNSejlCUTM4NXVlSzFjb0hJZSszTGZmT0pDTWJqem1WNkI0OTNYQwpvdjcxYW03MkFFOG8yOTVvaG14RWs3YXhZLzBVRW11L0g5THFNWnNoZnRFelBMcEk5ZDE1MzdPNC94THhJWnBMCndZcUdjV2xLWm1ac2ozNDhjTCt0S1NJRzgrVEE1b0N1NGt1UHQ1bCtsQU9mMDBlWGZKbElJMVBvT0s1UENtK0QKTHRGSlY0eUFkTGJhTDlBNGpYc0RjQ0ViZGZJd1BQcVBydDNhWTZ2ckZrL0NqaEZMZnM4TDZQKzFkeTcwc250Swo0RXdTSlF4d2pRTXBvT0ZUSk93VDJlNFp2eEN6U293L2lhTmhVZDZzaHdlVTlHTng3QzdpYjF1WWdlR0pYRFI1CmJIYnZPNUJpZWViYnBKb3ZKc1hRRU9FTzN0a1FqaGI3dC9lbzk4ZmxBZ2VZanpZSWxlZmlONVlOTm5XZSt3NXkKc1IyYnZBUDVTUVhZZ2QwRnRDcldRZW1zQVhhVkNnL1kzOVc5RWg4MUx5Z1hiTktZd2FnSlpIZHVSemU2enF4WgpYbWlkZjNMV2ljVUdRU2srV1Q3ZEp2VWt5UkduV3FOTVFCOUdvWm0xcHpwUmJvWTdubjF5cHhJRmVGbnRQbEY0CkZRc0RqNDNRTHdXeVBudEtIRXR6QlJMOHh1cmdVQk44UTVOMHM4cDA1NDRmQVFqUU1OUmJjVGEwQjdyQk1EQmMKU0xlQ081aW1mV0NLb3FNcGdzeTZ2WU1FRzZLREEwR2gxZ1h4RzhLMjhLaDhoanRHcUVncWlOeDJtbmEvSDJxbApQUm1QNnpqelpON0lLdzBLS1AvMzIrSVZRdFFpMENkZDRYbitHT2R3aUsxTzV0bUxPc2JkSjFGdS83eGs5VE5EClR3SURBUUFCbzRJQlJqQ0NBVUl3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQ0FRWXcKU3dZSUt3WUJCUVVIQVFFRVB6QTlNRHNHQ0NzR0FRVUZCekFDaGk5b2RIUndPaTh2WVhCd2N5NXBaR1Z1ZEhKMQpjM1F1WTI5dEwzSnZiM1J6TDJSemRISnZiM1JqWVhnekxuQTNZekFmQmdOVkhTTUVHREFXZ0JURXA3R2tleXh4Cit0dmhTNUIxLzhRVllJV0pFREJVQmdOVkhTQUVUVEJMTUFnR0JtZUJEQUVDQVRBL0Jnc3JCZ0VFQVlMZkV3RUIKQVRBd01DNEdDQ3NHQVFVRkJ3SUJGaUpvZEhSd09pOHZZM0J6TG5KdmIzUXRlREV1YkdWMGMyVnVZM0o1Y0hRdQpiM0puTUR3R0ExVWRId1ExTURNd01hQXZvQzJHSzJoMGRIQTZMeTlqY213dWFXUmxiblJ5ZFhOMExtTnZiUzlFClUxUlNUMDlVUTBGWU0wTlNUQzVqY213d0hRWURWUjBPQkJZRUZIbTBXZVo3dHVYa0FYT0FDSWpJR2xqMjZadHUKTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBS2N3QnNsbTcvRGxMUXJ0Mk01MW9HclMrbzQ0Ky95UW9ERlZEQwo1V3hDdTIrYjlMUlB3a1NJQ0hYTTZ3ZWJGR0p1ZU43c0o3bzVYUFdpb1c1V2xIQVFVN0c3NUsvUW9zTXJBZFNXCjlNVWdOVFA1MkdFMjRIR050TGkxcW9KRmxjRHlxU01vNTlhaHkyY0kycUJETEtvYmt4L0ozdldyYVYwVDlWdUcKV0NMS1RWWGtjR2R0d2xmRlJqbEJ6NHBZZzFodG1mNVg2RFlPOEE0anF2MklsOURqWEE2VVNiVzFGelhTTHI5TwpoZThZNElXUzZ3WTdiQ2tqQ1dEY1JRSk1FaGc3NmZzTzN0eEUrRmlZcnVxOVJVV2hpRjFteXY0UTZXK0N5QkZDCkRmdnA3T09HQU42ZEVPTTQrcVI5c2Rqb1NZS0VCcHNyNkd0UEFRdzRkeTc1M2VjNQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRQ1VLSWN3NVlvNjBRR2gKbGx6eWFGZzZWRnNSRjNnd0RmY0Q3VEI5V1RnWnA0ZmFjWk1GNDBvN2JWTFR5QlZ0QktZenhoM2xncWphQjNINQpnWUMwcnNGalc1eGVMZnJVQ1dkYmRSS25ZeE5OSUdnS1FMdFV2UDZkNlV1NW05dHVWcGpVOEx2KzRPS1ptQXhuCnZaVU43SjJnV1hSNmtMbVdMT21JcUUvNkF6TU1TeHZRYXkxS05JMVcrclM5RzJJTTV3aUpXc1FWR1FVeTMwdy8KVVJKYnR3dnFrUXV6bUYzVkhrZE1BejFxSlltSVR4eWhkZWVFL29Ea1RlN3dQTWJFOTBLajRPaC94REcxd2dNMQpvdXRxQlNjbDdCMUFCNERGQXN4YVU5Qlo5Q0gvbWNESG5wQThQTzJIL2hxMkRrT1gyb2xydGx6MTUvYUF2ZDFDClpLeTdLS0NQQWdNQkFBRUNnZ0VBQTJ2cUwxbGx0MVVEVmlGOFZRYk8zczM2Nm1xaDFtNUVJWjJWTEpmbVlVVksKc0dOR0UzRTcwaUtFc3FwZ3dFdEdzVlJtZFZudW4xWmpyZkR0TVg4RnJVODh6Ym4vSEcxNUt4WUpqNzhNZjQvNwpoeDBXbG03azdHMnFWNGQvYWsxcXF5UkNHekZEV211MkFhRlJzMmdlL2NpREZaK0pBYXhZMmxTVXdEL1pxbk42Cm1mNTZiOU1UdDNqRjNqa0J0b25ucFVMYjljOUxmU2tFZlRYeUxsaUIxV1dGS0YwM2dOQ0Q5QXNPQU9XS0pJbnIKZnJhMzRuSEE3bktacXVzL3A2d1ZSbngvekFqRlc4VzZCaDNDVTNLRWJBOGRaRXV4YncxaVJjK0ZXTWtqU3JLcwoxY3phMkRVSVpyREVXRWVKajVyamF5bHNSTjU2ZTZVRExxSWh3d21DZFFLQmdRQytHemR6dFFTVUpmbmtPSWlVCnN0SHE1d0V0WWhkSFBSVzI1MzRSa2p2UFV0ejNEaGxsWWE5d3ZFc1AwZmFTdnM1L2ZMcnN3NlZEUFhDbUpIemEKcjA4cXRheHJ1R2ZaQVBVeHNBdWZZdzIvVFBYMEFTMkxkNWQ0S1RJbVJlSXdxYTNOZ1d3MFNiRG9RNjU3Q0VMaQpSbTBOcXp5K2N6ZjlaQkhud0NxWkNWbmREUUtCZ1FESGd4OHZnbjZlV2theXY4dVBtMFNIa3pYeVF5akRqS25DClMvNit4WG1EMFpOWGtBa3ZGRWsrSndTSjlKMFNBWkFyWHd5VE5oNlJtUkxpTk9NWGU4ZVFMaTRERXQ5SVNydHUKV0dHd0lESUpTR3ZrMTMxbHZlNWNYTTQvNDNHVXJCczRkVnNaTmFJcEFNdERKaWtjOWF6b2xuZ3hjcE9xbTdNdApUVHRIVnU1bEN3S0JnUUNMSGZHamErbHczS1dVL0VYK3d5bFl4RG1aVTNvRGVORW1LeHVYa2pMUWtpdi9ZMEwwCmJOcnRIZTIwSXd0VThlcTlZcktMeHRSdWMweTNXR1pCeGg2aCs1YTBzWnJWTTUwN0FrQlBJRGFVTXFhZUxDcC8KTUVJWS9kU2tLMm5PQUsyZWdNS0ZOUlFQdEUrLzJ4ak82NGlzZ3c0TnROVlpTZHpNZ2xUcDd1empGUUtCZ0ZzMwpKS3ZwQXBETmYyTTc4d3B1RjQvUWl5cCs4QVV2cTNGc28wUi9Mb1pJN0E5dGgvVmhWZmMzaVlpMU1KYko1aXNlCklyYXZXSnlDbXJLWE1YaE1IRHBjRXFkUEdveUh0bGZGeXF2bW5GbklKYVFUclg0MXJ1UEZmbnFSTngyYzdqa0sKMXFLWTlkRy9UaThlSkUvY05yaUVDdUc0bTdDMXpONmFYODdHL09sdkFvR0JBS05xYzlwK202TUlCeWFFU2g3aQpKeWRwYXdpeWFaa2gxUmVkUjNyVFR1WHBNWlBiL0cvRTFpN1VoTlFQZlZ4N2U1TGhKbmVzS2Y0bTVsZUhMajgrCkhaa3BiQURleHE4OHJma0RCM1pnRlJSaUJjRFR0WkRVYVJDS1lXUzNaelIxU1Jwd2hRVnQ2OU5JUFhHZExobysKRU5yQ25GQ2hXSUtyd0paYVRnT25wQXhFCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K

# Configurações prometheus
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus
  namespace: monitor
data:
  prometheus.yml: |-
    global:
      scrape_interval: 1m
      evaluation_interval: 1m
      scrape_timeout: 15s

    rule_files:
      - 'alerts.yml'

    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager.apcode.com.br

    scrape_configs:
    - job_name: 'Servidor cluster.apcode.com.br'
      static_configs:
        - targets: [ 'cluster.apcode.com.br:9100' ]
          labels: { 'env': 'servidores' }  
    - job_name: 'Interface de Login'
      metrics_path: '/actuator/prometheus'
      static_configs:
        - targets: [ 'login.apcode.com.br' ]
          labels: { 'env': 'sistemas' }  
    - job_name: 'Portal de Sistemas'
      metrics_path: '/actuator/prometheus'
      static_configs:
        - targets: [ 'portal.apcode.com.br' ]
          labels: { 'env': 'sistemas' }  
    - job_name: 'Módulo de Controle'
      metrics_path: '/actuator/prometheus'
      static_configs:
        - targets: [ 'controle.apcode.com.br' ]
          labels: { 'env': 'sistemas' }  
  alerts.yml: |-
    groups:
      - name: Alertas de Servidores
        rules:
      
        # Alerta de serviço indisponível por mais de 2 minutos
        - alert: Servico_Indisponivel
          expr: up == 0
          for: 2m
          labels:
            severity: URGENTE
          annotations:
            title: '*{{ $labels.job }}* esta offline'
            summary: '*{{ $labels.job }}* voltou a estar online'
      
        # Alerta para uso de mais de 90% de CPU
        - alert: Uso_Excessivo_CPU
          expr: 100 - (avg by(job) (rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 90
          for: 5m
          labels:
            severity: Atenção
          annotations:
            title: 'Uso constante de mais de 90% de CPU do *{{ $labels.job }}*'
            summary: 'Uso de CPU do *{{ $labels.job }}* normalizado para menos de 90%'

        # Alerta para menos de 100MB de memória
        - alert: Pouca_Memoria
          expr: node_memory_MemAvailable_bytes < 100000000
          for: 5m
          labels:
            severity: Atenção
          annotations:
            title: 'Menos de 100MB de memória disponível para *{{ $labels.job }}*'
            summary: 'Memória disponível para *{{ $labels.job }}* aumentou para mais de 100MB'

        # Alerta para load average acima de 5
        - alert: Baixa_Performance
          expr: node_load5 > 8
          for: 5m
          labels:
            severity: Atenção
          annotations:
            title: 'Baixa performance do *{{ $labels.job }}*. Usuários podem estar sendo afetados'
            summary: 'Performance restaurada do *{{ $labels.job }}*'

        # Disco sem espaço
        #- alert: Disco_Sem_Espaco
        #  expr: (node_filesystem_avail_bytes{mountpoint='/'}  * 100) / node_filesystem_size_bytes{mountpoint='/'} < 10
        #  for: 5m
        #  labels:
        #    severity: URGENTE
        #  annotations:
        #    title: 'Disco de *{{ $labels.job }}* com menos de 10% de espaço'
        #    summary: 'Disco de *{{ $labels.job }}* aumentou para mais de 10% de espaço'

        # Disco extremamente sem espaço
        - alert: Disco_Sem_Espaco
          expr: (node_filesystem_avail_bytes{mountpoint='/'}  * 100) / node_filesystem_size_bytes{mountpoint='/'} < 2
          for: 5m
          labels:
            severity: URGENTE
          annotations:
            title: 'RISCO DE TRAVAMENTO DO SERVIDOR *{{ $labels.job }}*. Menos de 2% de espaço'
            summary: 'Disco de *{{ $labels.job }}* aumentou para mais de 2% de espaço'

# Configurações grafana tempo
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tempo
  namespace: monitor
data:
  tempo-config.yml: |-
    server:
      http_listen_port: 3200

    distributor:
      receivers:
        zipkin:

    storage:
      trace:
        backend: local
        wal:
          path: /tmp/tempo/wal
        local:
          path: /tmp/tempo/blocks

# Configurações grafana loki
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki
  namespace: monitor
data:
  loki-config.yml: |-
    auth_enabled: false

    server:
      http_listen_port: 3100
      grpc_listen_port: 9096

    ingester:
      wal:
        enabled: true
        dir: /tmp/wal
      lifecycler:
        address: 127.0.0.1
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1
        final_sleep: 0s
      chunk_idle_period: 1h       # Any chunk not receiving new logs in this time will be flushed
      max_chunk_age: 1h           # All chunks will be flushed when they hit this age, default is 1h
      chunk_target_size: 1048576  # Loki will attempt to build chunks up to 1.5MB, flushing first if chunk_idle_period or max_chunk_age is reached first
      chunk_retain_period: 30s    # Must be greater than index read cache TTL if using an index cache (Default index read cache TTL is 5m)
      max_transfer_retries: 0     # Chunk transfers disabled

    schema_config:
      configs:
        - from: 2021-06-30
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h

    storage_config:
      boltdb_shipper:
        active_index_directory: /tmp/loki/boltdb-shipper-active
        cache_location: /tmp/loki/boltdb-shipper-cache
        cache_ttl: 24h         # Can be increased for faster performance over longer query periods, uses more disk space
        shared_store: filesystem
      filesystem:
        directory: /tmp/loki/chunks

    compactor:
      working_directory: /tmp/loki/boltdb-shipper-compactor
      shared_store: filesystem

    limits_config:
      reject_old_samples: true
      reject_old_samples_max_age: 168h

    chunk_store_config:
      max_look_back_period: 0s

    table_manager:
      retention_deletes_enabled: false
      retention_period: 0s

    ruler:
      storage:
        type: local
        local:
          directory: /tmp/loki/rules
      rule_path: /tmp/loki/rules-temp
      alertmanager_url: http://alertmanager:9093
      ring:
        kvstore:
          store: inmemory
      enable_api: true

# Prometheus
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        name: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus
          imagePullPolicy: Always
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'          
          ports:
            - name: prometheus
              containerPort: 9090
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
            - name: prometheus-storage
              mountPath: /prometheus/
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus
        - name: prometheus-storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitor
spec:
  selector:
    app: prometheus
  type: LoadBalancer
  ports:
    - name: prometheus
      port: 9090
      targetPort: 9090

# Alertmanager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: monitor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
        name: alertmanager
    spec:
      containers:
        - name: alertmanager
          image: prom/alertmanager
          imagePullPolicy: Always
          ports:
            - name: alertmanager
              containerPort: 9093
---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: monitor
spec:
  selector:
    app: alertmanager
  type: LoadBalancer
  ports:
    - name: alertmanager
      port: 9093
      targetPort: 9093

# Grafana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        name: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana
          imagePullPolicy: Always
          ports:
            - name: grafana
              containerPort: 3000
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana/
      volumes:
        - name: grafana-storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitor
spec:
  selector:
    app: grafana
  type: LoadBalancer
  ports:
    - name: grafana
      port: 3000
      targetPort: 3000

# Proxy
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: monitor
  namespace: monitor
spec:
  tls:
    - secretName: certificado-ssl
  rules:
    - host: prometheus.apcode.com.br
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: prometheus
                port:
                  name: prometheus
    - host: alertmanager.apcode.com.br
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: alertmanager
                port:
                  name: alertmanager
    - host: grafana.apcode.com.br
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: grafana
                port:
                  name: grafana

# Grafana tempo
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: tempo
  namespace: monitor
spec:
  selector:
    matchLabels:
      app: tempo
  template:
    metadata:
      labels:
        app: tempo
        name: tempo
    spec:
      containers:
        - name: tempo
          image: grafana/tempo
          imagePullPolicy: Always
          args:
            - '--config.file=/etc/tempo/tempo-config.yml'
          ports:
            - name: tempo
              containerPort: 3200
              hostPort: 3200
            - name: zipkin
              containerPort: 9411
              hostPort: 9411
          volumeMounts:
            - name: tempo-config
              mountPath: /etc/tempo
            - name: tempo-storage
              mountPath: /tmp/tempo
      volumes:
        - name: tempo-config
          configMap:
            name: tempo
        - name: tempo-storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: tempo
  namespace: monitor
spec:
  selector:
    app: tempo
  ports:
    - name: tempo
      port: 3200
      targetPort: 3200
    - name: zipkin
      port: 9411
      targetPort: 9411

# Grafana loki
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: loki
  namespace: monitor
spec:
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
        name: loki
    spec:
      containers:
        - name: loki
          image: grafana/loki
          imagePullPolicy: Always
          args:
            - '--config.file=/etc/loki/loki-config.yml'
          ports:
            - name: loki
              containerPort: 3100
              hostPort: 3100
          volumeMounts:
            - name: loki-config
              mountPath: /etc/loki
            - name: loki-storage
              mountPath: /tmp
      volumes:
        - name: loki-config
          configMap:
            name: loki
        - name: loki-storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: monitor
spec:
  selector:
    app: loki
  ports:
    - name: loki
      port: 3100
      targetPort: 3100

# Node Exporter
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nodeexporter
  namespace: monitor
  labels:
    app: nodeexporter
spec:
  selector:
    matchLabels:
      app: nodeexporter
  template:
    metadata:
      labels:
        app: nodeexporter
    spec:
      containers:
        - name: node-exporter
          image: prom/node-exporter
          imagePullPolicy: Always
          args:
            - --path.procfs=/host/proc
            - --path.sysfs=/host/sys
          ports:
            - name: metrics
              containerPort: 9100
              hostPort: 9100
          volumeMounts:
            - name: proc
              mountPath: /host/proc
              readOnly:  true
            - name: sys
              mountPath: /host/sys
              readOnly: true
      hostNetwork: true
      hostPID: true
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: sys
          hostPath:
            path: /sys
---
apiVersion: v1
kind: Service
metadata:
  name: node-exporter
  namespace: monitor
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port:   '9100'
spec:
  selector:
    app: nodeexporter
  ports:
    - name: node-exporter
      port: 9100
      targetPort: 9100